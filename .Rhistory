group_by(patient_id) |>
mutate(line_number = row_number())
# Finally, clean up the drug_codes and add therapy duration
# Remember: end_date here is just max(therapy_date) - it's not a true end date!
bc_lots <-
bc_combined |>
select(patient_id, drug_code, line_number, start_date, end_date) |>
mutate(
drug_code = case_when(
drug_code == "B+A" ~ "A+B",
TRUE ~ drug_code
),
line_duration = difftime(end_date, start_date, units = "days"),
line_duration = as.numeric(line_duration)
)
#| echo: false
#| warning: false
first_line_graph <-
bc_lots |>
filter(line_number == 1) |>
ggplot(aes(
x = drug_code,
y = line_duration
)) +
ggdist::stat_halfeye(
aes(colour = drug_code, fill = drug_code),
adjust = .5,
width = .6,
.width = 0,
justification = -.3,
point_colour = NA
) +
geom_boxplot(
aes(colour = drug_code),
width = .25,
outlier.shape = NA
) +
geom_point(
aes(colour = drug_code),
size = 1.3,
alpha = .3,
position = position_jitter(
seed = 1, width = .1
)
) +
coord_cartesian(xlim = c(1.2, NA), clip = "off") +
labs(x = "Drug Code",
y = "Duration of first-line therapy (days)",
title = "Duration of first-line therapy by drug type",
subtitle = "Breast cancer patients only") +
coord_flip() +
theme_bw() +
theme(legend.title = element_blank())
first_line_graph
model |> tbl_regression()
?update.packages
detach("package:dplyr", unload = TRUE)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
# Chunk 1
#| context: setup
#| include: false
library(tidyverse)
library(here)
library(lubridate)
library(gt)
library(scales)
library(patchwork)
library(janitor)
library(purrr)
library(ggdist)
library(survival)
library(glmmTMB)
library(gtsummary)
diagnosis <- read_csv(here("data/Patient_Diagnosis.csv"))
treatment <- read_csv(here("data/Patient_Treatment.csv"))
# I'm usually OK with numeric diagnosis codes and character diagnosis and drug codes at the initial data analysis stage, but as I'm going to be changing the types of the other variables I'll do them too.
# n.b. I usually leave variables that could be factors as strings until I need to change them as factors later - I find that in my analyses being able to use regexps is more useful for complex munging
diagnosis <-
diagnosis |>
mutate(
patient_id = as.character(patient_id),
diagnosis_date = mdy(diagnosis_date),
diagnosis_code = as.character(diagnosis_code)
)
treatment <-
treatment |>
mutate(
patient_id = as.character(patient_id),
treatment_date = mdy(treatment_date)
)
# we also want to check the data for duplicates and if needed take the earliest dx date
duplicate_dx <-
diagnosis |>
group_by(patient_id, diagnosis) |>
count() |>
filter(n > 1)
# so yes, we have duplicates here. Multiple cancer dxs are fine, but the multiple dxs of the
# same cancer type are not. We can even see (using the ICD9 codes) that these are the same
# type of dx - we're not dealing with metastases (no 174.9 in the duplicate dxs)
diagnosis |> filter(patient_id %in% duplicate_dx$patient_id)
# we'll take the earliest dx date for each type of cancer
diagnosis_filtered <-
diagnosis |>
group_by(patient_id, diagnosis) |>
slice_min(diagnosis_date, with_ties = FALSE) |>
ungroup()
# treatment data can be more complicated to de-duplicate. Let's see if we have any exact duplicates
nrow(treatment |> distinct()) == nrow(treatment)
# looks like we do. Let's just check them quickly
treatment |> janitor::get_dupes()
# with the limited drug information here, I'm going to assume that these are duplicates from
# messy RW data. Let's filter them out
treatment_filtered <-
treatment |>
distinct()
# Chunk 2
#| echo: false
#| warning: false
# How can we present the information? Simple to provide tables.
# nb for longer analyses, I'd clean the column names to make life easier. As we're
# making tables straight away, I'll leave them in a nice format for presentation
all_dx <-
diagnosis_filtered |>
group_by(diagnosis) |>
count() |>
pivot_wider(names_from = "diagnosis", values_from = "n") |>
mutate("Diagnosis Year" = "All", .before = everything())
dx_by_year <-
diagnosis_filtered |>
group_by(diagnosis, year(diagnosis_date)) |>
count() |>
pivot_wider(names_from = "diagnosis", values_from = "n") |>
rename("Diagnosis Year" = `year(diagnosis_date)`) |>
mutate(
`Colon Cancer` = replace_na(`Colon Cancer`, 0),
`Diagnosis Year` = as.character(`Diagnosis Year`)
)
diagnosis_gt <-
bind_rows(
all_dx,
dx_by_year
) |>
gt() |>
tab_spanner(
label = "Cancer Type",
columns = c(`Breast Cancer`, `Colon Cancer`)
) |>
tab_style(
style = cell_borders(
sides = c("right"),
weight = px(2)
),
locations = cells_body(
columns = c(`Diagnosis Year`)
)
) |>
tab_style(
style = cell_borders(
sides = c("right"),
weight = px(2)
),
locations = cells_column_labels(
columns = c(`Diagnosis Year`)
)
) |>
tab_style(
style = cell_borders(
sides = c("bottom"),
weight = px(2)
),
locations = cells_column_labels(
columns = everything()
)
) |>
tab_style(
style = cell_borders(
sides = c("bottom"),
color = "black",
weight = px(2),
style = "dashed"
),
locations = cells_body(
rows = 1,
columns = everything()
)
) |>
cols_align(
align = "center",
columns = c(`Breast Cancer`, `Colon Cancer`)
) |>
tab_header(
title = "Number of cancer diagnoses over time"
)
diagnosis_gt
# We can also graph the distribution of cases and cases per year, but an overall bar chart
# isn't THAT informative
all_dx_graph <-
diagnosis_filtered |>
ggplot(aes(x = diagnosis)) +
geom_bar() +
labs(
x = "Cancer Type",
y = "Total Count",
title = "Total Cancer Diagnoses"
) +
theme_bw()
# have to be a bit more complex here - we need the zero count for Colon Cancer in 2010 otherwise the bars in position = "dodge" aren't consistent
dx_by_year_graph <-
diagnosis_filtered |>
mutate(diagnosis_year = year(diagnosis_date)) |>
group_by(diagnosis_year, diagnosis) |>
summarize(count = n()) |>
ungroup() |>
complete(diagnosis_year, diagnosis, fill = list(count = 0)) |>
ggplot(aes(x = diagnosis_year, y = count, fill = diagnosis)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "Diagnosis Year",
y = "Total Count",
title = "Diagnoses by Year"
) +
theme_bw() +
scale_y_continuous(breaks = pretty_breaks()) +
theme(
legend.title = element_blank(),
legend.position = "bottom"
)
all_dx_graph | dx_by_year_graph
# Chunk 3
#| echo: false
#| warning: false
#| include: false
# We want the earliest therapy start date. As there are multiple treatment dates, we'll fin the one closest to but after dx date.
# note: in real life, we may want to find the treatment date closest to dx date even if it's before the dx date. Patients may start therapy on the same day as their diagnosis, but the paperwork for dx may be delayed. However, here I'll be strict and only look for on or after dx date.
# however - we have an issue! There are patients with multiple cancer types and the treatment isn't specified for cancer type in the treatment table
(multiple_cancer_dx <-
diagnosis_filtered |>
group_by(patient_id, diagnosis) |>
count() |>
group_by(patient_id) |>
count() |>
filter(n > 1))
# these patients diagnosis dates are also very close - it's going to make telling the treatments
# apart impossible.
diagnosis_filtered |>
filter(patient_id %in% multiple_cancer_dx$patient_id)
# so, we're going to have to remove them for the remainder of the analysis.
# now we can join the datasets together, filter for the closest treatment date after dx date, and then work out the time to treatment.
time_to_treatment <-
diagnosis_filtered |>
filter(!patient_id %in% multiple_cancer_dx$patient_id) |>
left_join(treatment_filtered, by = "patient_id", multiple = "all") |>
# strict filtering for this example. First, we find only treatment dates >= dx date. Then, we find the earliest treatment date. Then, we can work out the time to treatment
filter(treatment_date >= diagnosis_date) |>
group_by(patient_id, diagnosis) |>
slice_min(treatment_date, with_ties = FALSE) |>
ungroup() |>
mutate(
time_to_treatment = difftime(treatment_date, diagnosis_date, units = "days"),
time_to_treatment = as.numeric(time_to_treatment)
)
# now we can summarise our results. Usually we'd have a function to do this repeatedly, here we won't as it's one-off
time_table <-
time_to_treatment |>
group_by(diagnosis) |>
summarise(
n = n(),
mean = mean(time_to_treatment, na.rm = TRUE),
sd = sd(time_to_treatment, na.rm = TRUE),
median = median(time_to_treatment, na.rm = TRUE),
min = min(time_to_treatment, na.rm = TRUE),
max = max(time_to_treatment, na.rm = TRUE)
) |>
mutate(
n = as.character(n),
mean_sd = str_c(round(mean, 1), " (", round(sd, 1), ")"),
median_range = str_c(round(median, 1), " (", min, "-", max, ")")
)
# we have a large range in the colon cancer patients - 0 to 304. Let's check that.
time_to_treatment |> filter(time_to_treatment > 200)
# This is large! There is one patient with time to treatment of over 300 days. Is this an outlier? It could be. Standard of care is surgery within ~30 days (depending on who you ask!). BUT. This is not a surgery table. This is a therapy table - we don't know what therapy. A patient could have had surgery for low-stage cancer, and then a year later received drug treatment. This is perfectly feasible and with the data we have we can't say if it's an outlier. This gets in to a different philosophical conversation about outliers, however - which I'd love to discuss! My view is unless the data is fundamentally wrong - a mistake - then it is a valid part of the data generation process and should be included.
time_table_gt <-
time_table |>
select(diagnosis, n, mean_sd, median_range) |>
pivot_longer(cols = c(n, mean_sd, median_range), names_to = "statistic", values_to = "value") |>
pivot_wider(names_from = diagnosis, values_from = value) |>
# clean up names for column
mutate(statistic = case_when(
statistic == "n" ~ "N",
statistic == "mean_sd" ~ "Mean (SD)",
statistic == "median_range" ~ "Median (Range)"
)) |>
gt() |>
tab_spanner(
label = "Cancer Type",
columns = c(`Breast Cancer`, `Colon Cancer`)
) |>
tab_style(
style = cell_borders(
sides = c("right"),
weight = px(2)
),
locations = cells_body(
columns = c(statistic)
)
) |>
tab_style(
style = cell_borders(
sides = c("right"),
weight = px(2)
),
locations = cells_column_labels(
columns = c(statistic)
)
) |>
tab_style(
style = cell_borders(
sides = c("bottom"),
weight = px(2)
),
locations = cells_column_labels(
columns = everything()
)
) |>
cols_align(
align = "center",
columns = c(`Breast Cancer`, `Colon Cancer`)
) |>
tab_header(
title = "Time from initial cancer diagnosis to start of therapy (days)"
)
# could also forest plot this I guess
time_statistics <-
time_to_treatment |>
group_by(diagnosis) |>
summarise(
mean = mean(time_to_treatment, na.rm = TRUE),
median = median(time_to_treatment, na.rm = TRUE),
sd = sd(time_to_treatment, na.rm = TRUE),
min = min(time_to_treatment, na.rm = TRUE),
max = max(time_to_treatment, na.rm = TRUE)
) |>
pivot_longer(c(mean, median), names_to = "statistic", values_to = "value") |>
mutate(
lower = case_when(
statistic == "mean" ~ value - sd,
statistic == "median" ~ min
),
upper = case_when(
statistic == "mean" ~ value + sd,
statistic == "median" ~ max
),
statistic = case_when(
statistic == "mean" ~ "Mean + SD time to treatment (days)",
statistic == "median" ~ "Median + range of time to treatment (days)"
)
)
# Create the combined forest plot
time_to_treatment_graph <-
time_statistics |>
ggplot(aes(x = diagnosis, y = value, colour = diagnosis)) +
geom_pointrange(aes(ymin = lower, ymax = upper), size = 0.5) +
facet_wrap(~statistic, scales = "free", ncol = 1) +
coord_flip() +
labs(
x = "Diagnosis",
y = "Statistic Value",
title = "Time to treatment initiation post diagnosis date (days)"
) +
theme_bw() +
theme(legend.title = element_blank())
# Chunk 4
time_table_gt
time_to_treatment_graph
# Chunk 5
#| include: false
# we have the joining code from above. Should be made more generalisable for longer-term work
breast_cases <-
diagnosis_filtered |>
filter(
!patient_id %in% multiple_cancer_dx$patient_id,
str_detect(diagnosis, "Breast")
) |>
left_join(treatment_filtered, by = "patient_id", multiple = "all")
# we have a patient with no matching drug_code - that's ok here, but something to be aware of
breast_cases |> count(drug_code)
# Now we have our breast-cases, we need to define the first-line therapy. We'll use the following rules:
# - First therapy started within 14 days pre-index or anytime post-index
# - Therapies with less than 28 day gap will be considered the same line (for the duration below)
# How are we going to define duration of therapy? In this dataset we only have treatment_date, not treatment duration. For this example, we'll use the time difference between the first treatment date and last treatment date for each patient. This isn't really appropriate! We don't know the actual therapy durations so this will have to do for here.
breast_cases_filtered <-
breast_cases |>
filter(str_detect(drug_code, "A|B")) |>
# this first finds cases within 14 days pre-index
mutate(
time_between_treatment_and_index = difftime(treatment_date, diagnosis_date, units = "days"),
time_between_treatment_and_index = as.numeric(time_between_treatment_and_index)
) |>
filter(time_between_treatment_and_index >= -14) |>
# and then we find the first case for each patient as our start of 1L
group_by(patient_id) |>
mutate(start_of_1l = min(treatment_date)) |>
ungroup()
# First, calculate date ranges for each drug for each patient. This combines date ranges if they're less than 28 days apart for each patient_id and drug_code
bc_ranges <-
breast_cases_filtered |>
arrange(patient_id, drug_code, treatment_date) |>
group_by(patient_id, drug_code) |>
mutate(new_group = treatment_date - lag(treatment_date, default = first(treatment_date)) > 28) |>
mutate(line_number = cumsum(new_group) + 1) |>
group_by(patient_id, drug_code, line_number) |>
summarise(
start_date = min(treatment_date),
end_date = max(treatment_date),
.groups = "drop"
)
# Then, combine overlapping ranges for the same patient, listing all drugs involved. Then, combine the drug_code if there are multiple drug_codes to account for combination therapy
bc_combined <-
bc_ranges |>
group_by(patient_id, start_date) |>
summarise(
drug_codes = list(unique(drug_code)),
end_date = max(end_date),
.groups = "drop"
) |>
group_by(patient_id, end_date) |>
summarise(
drug_codes = list(unique(unlist(drug_codes))),
start_date = min(start_date),
.groups = "drop"
) |>
mutate(
drug_code = map_chr(drug_codes, ~ paste(.x, collapse = "+")),
drug_codes = NULL
) |>
arrange(patient_id, start_date) |>
group_by(patient_id) |>
mutate(line_number = row_number())
# Finally, clean up the drug_codes and add therapy duration
# Remember: end_date here is just max(therapy_date) - it's not a true end date!
bc_lots <-
bc_combined |>
select(patient_id, drug_code, line_number, start_date, end_date) |>
mutate(
drug_code = case_when(
drug_code == "B+A" ~ "A+B",
TRUE ~ drug_code
),
line_duration = difftime(end_date, start_date, units = "days"),
line_duration = as.numeric(line_duration)
)
# Chunk 6
#| echo: false
#| warning: false
first_line_graph <-
bc_lots |>
filter(line_number == 1) |>
ggplot(aes(
x = drug_code,
y = line_duration
)) +
ggdist::stat_halfeye(
aes(colour = drug_code, fill = drug_code),
adjust = .5,
width = .6,
.width = 0,
justification = -.3,
point_colour = NA
) +
geom_boxplot(
aes(colour = drug_code),
width = .25,
outlier.shape = NA
) +
geom_point(
aes(colour = drug_code),
size = 1.3,
alpha = .3,
position = position_jitter(
seed = 1, width = .1
)
) +
coord_cartesian(xlim = c(1.2, NA), clip = "off") +
labs(x = "Drug Code",
y = "Duration of first-line therapy (days)",
title = "Duration of first-line therapy by drug type",
subtitle = "Breast cancer patients only") +
coord_flip() +
theme_bw() +
theme(legend.title = element_blank())
first_line_graph
# Chunk 7
#| include: true
#| eval: false
bc_lots_flag <-
bc_lots |>
mutate(eventflag = 0)
survfit(Surv(line_duration, eventflag) ~ drug_code,
data = bc_lots_flag)
# Chunk 8
model <- glmmTMB(line_duration ~ drug_code, data = bc_lots)
summary(model)
model |> tbl_regression()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
quarto install tinytex
install.packages("tinytex")
